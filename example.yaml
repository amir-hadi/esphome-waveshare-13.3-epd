esphome:
  name: photo-frame
  friendly_name: Photo Frame

esp32:
  board: esp32dev
  framework:
    type: esp-idf
  # Use custom partitions with SPIFFS (single app + spiffs large)
  partitions: partitions.csv

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "o/UlT22K9GgWOo6lOChF+bMMvAWnsWctPv3b/abIUCc="
  services:
    - service: set_image_url
      variables:
        url: string
      then:
        - lambda: |-
            id(epd_display).setImageUrl(std::string(url));
    - service: download_image
      then:
        - lambda: 'id(epd_display).startDownload();'
    - service: display_image
      then:
        - lambda: 'id(epd_display).displayFromFile();'

ota:
  - platform: esphome
    password: "b90f12e39aade3f5a99cc36c909af902"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Photo-Frame Fallback Hotspot"
    password: "Pvwqos4MOApr"

external_components:
  # - source: github://amir-hadi/esphome-waveshare-13.3-epd@main
  #   components: [ epd_photo_frame ]
  - source:
      type: local
      path: components
    components: [ epd_photo_frame ]

captive_portal:

# Enable SPI
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14
  miso_pin: GPIO19

# Your EPD Photo Frame component
display:
  - platform: epd_photo_frame
    id: epd_display
    reset_pin: GPIO26
    dc_pin: GPIO27
    busy_pin: GPIO25
    power_pin: GPIO33
    cs_master_pin: GPIO18
    cs_slave_pin: GPIO22
    image_url: "http://10.0.0.253:8080/image.bin"
    update_interval: 30min

# Manual refresh button entity
button:
  - platform: template
    name: "Refresh Display"
    on_press:
      - lambda: 'id(epd_display).refresh();'

# Lightweight web server to accept binary uploads
web_server:
  port: 80
  include_internal: true

## Optional: Add a text sensor to show current image URL (commented to keep build minimal)
# text_sensor:
#   - platform: custom
#     lambda: |-
#       auto url_sensor = new esphome::text_sensor::TextSensor();
#       url_sensor->publish_state(id(epd_display).getImageUrl());
#       return {url_sensor};
#     text_sensors:
#       - name: "Current Image URL"
#         id: current_image_url